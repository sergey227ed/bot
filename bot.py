
from aiogram import Bot, Dispatcher, types, executor
import asyncio
import logging

API_TOKEN = '7229050941:AAGkTH895S0qBIDakK_0RAJCtoL6tNw_hzY'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

USERS_FILE = "users.txt"

def save_user(chat_id):
    try:
        with open(USERS_FILE, "a+") as f:
            f.seek(0)
            users = f.read().splitlines()
            if str(chat_id) not in users:
                f.write(f"{chat_id}\n")
    except:
        pass

def get_users():
    try:
        with open(USERS_FILE, "r") as f:
            return f.read().splitlines()
    except:
        return []

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    save_user(message.chat.id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

@dp.message_handler(commands=['sendall'])
async def sendall_cmd(message: types.Message):
    if str(message.from_user.id) != '7911493553':
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

    text = message.text.replace("/sendall", "").strip()
    if not text:
        return await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

    users = get_users()
    success, fail = 0, 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
            await asyncio.sleep(0.1)
        except:
            fail += 1
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}, ‚ùå –û—à–∏–±–∫–∏: {fail}")
@dp.message_handler(commands=['audience'])
async def audience_cmd(message: types.Message):
    if str(message.from_user.id) != '7911493553':
        return
    users = get_users()
    await message.answer(f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
